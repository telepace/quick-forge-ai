// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  ItemsReadItemsData,
  ItemsReadItemsResponse,
  ItemsCreateItemData,
  ItemsCreateItemResponse,
  ItemsReadItemData,
  ItemsReadItemResponse,
  ItemsUpdateItemData,
  ItemsUpdateItemResponse,
  ItemsDeleteItemData,
  ItemsDeleteItemResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginTestTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersReadUserMeResponse,
  UsersDeleteUserMeResponse,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersUpdateUserData,
  UsersUpdateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserResponse,
  UtilsTestEmailData,
  UtilsTestEmailResponse,
  UtilsHealthCheckResponse,
} from "./types.gen"

export class ItemsService {
  /**
   * Read Items
   * Retrieve items from the API.
   *
   * @param {Object} [data={}] The data for the request.
   * @param {number} [data.skip] The number of items to skip in the result set.
   * @param {number} [data.limit] The maximum number of items to return.
   * @returns {CancelablePromise<ItemsReadItemsResponse>} Successful response containing the retrieved items.
   * @throws {ApiError} If an API error occurs during the request.
   *
   * Example:
   * ```typescript
   * const data = {
   *   skip: 0,
   *   limit: 10
   * };
   * readItems(data).then(response => {
   *   console.log(response.data);
   * }).catch(error => {
   *   console.error(error);
   * });
   * ```
   */
  public static readItems(
    data: ItemsReadItemsData = {},
  ): CancelablePromise<ItemsReadItemsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Item
   * Creates a new item using the provided data.
   *
   * @param {ItemsCreateItemData} data - The data for the request containing the item details.
   * @returns {CancelablePromise<ItemsCreateItemResponse>} - A promise that resolves to the created item's public information or throws an error if creation fails.
   * @throws {ApiError} - Throws an ApiError if the validation of the input data fails, as indicated by a 422 status code response.
   *
   * @example
   * const createItemData = {
   *   requestBody: {
   *     name: "New Item",
   *     description: "This is a new item",
   *     price: 19.99,
   *   },
   * };
   *
   * createItem(createItemData)
   *   .then((item) => console.log(item))
   *   .catch((error) => console.error(error));
   */
  public static createItem(
    data: ItemsCreateItemData,
  ): CancelablePromise<ItemsCreateItemResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/items/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Item
   * Get item by ID.
   *
   * @param {Object} data - The data for the request.
   * @param {string} data.id - The ID of the item to retrieve.
   *
   * @returns {Promise<ItemsReadItemResponse>}
   * Successful Response with an `ItemPublic` object.
   *
   * @throws {ApiError}
   * Throws an `ApiError` if the request fails, e.g., due to validation errors.
   */
  public static readItem(
    data: ItemsReadItemData,
  ): CancelablePromise<ItemsReadItemResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update an item.
   *
   * @param {Object} data - The data for the request.
   * @param {number|string} data.id - The ID of the item to be updated.
   * @param {Object} data.requestBody - The body of the request containing the updated data.
   * @returns {CancelablePromise<ItemsUpdateItemResponse>} Successful response with updated item details.
   * @throws {ApiError} If an error occurs during the API call, such as validation errors (HTTP 422).
   */
  public static updateItem(
    data: ItemsUpdateItemData,
  ): CancelablePromise<ItemsUpdateItemResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete an item from the system.
   *
   * @param {ItemsDeleteItemData} data - The data for the request containing the item ID to be deleted.
   * @param {string} data.id - The unique identifier of the item to be deleted.
   * @returns {CancelablePromise<ItemsDeleteItemResponse>} A promise that resolves with a successful response or rejects with an ApiError if the operation fails.
   * @throws {ApiError} If there is a validation error (HTTP 422).
   *
   * Example:
   * deleteItem({ id: 'item123' })
   *   .then(response => console.log('Item deleted successfully:', response))
   *   .catch(error => console.error('Failed to delete item:', error));
   */
  public static deleteItem(
    data: ItemsDeleteItemData,
  ): CancelablePromise<ItemsDeleteItemResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/items/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * OAuth2 compatible token login, get an access token for future requests
   * @param {LoginLoginAccessTokenData} data - The data for the request.
   * @param {FormData} data.formData - Form data containing necessary login credentials.
   * @returns {CancelablePromise<LoginLoginAccessTokenResponse>} - Successful response containing the access token.
   * @throws {ApiError} - Throws an ApiError if the request fails or validation errors occur.
   * @example
   * const loginData = {
   *   formData: {
   *     username: 'user',
   *     password: 'pass'
   *   }
   * };
   * loginAccessToken(loginData)
   *   .then(response => console.log(response.data))
   *   .catch(error => console.error(error));
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @returns {LoginTestTokenResponse} Successful Response
   * @throws {ApiError}
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }

  /**
   * Recover Password
   * Initiates the password recovery process for the user associated with the provided email.
   *
   * @param data - The data required for the password recovery request.
   * @param data.email - The email address of the user requesting password recovery.
   *
   * @returns A Promise that resolves to a `LoginRecoverPasswordResponse` object on successful completion, or rejects with an `ApiError` if there is an error during the process.
   *
   * @throws {ApiError} If the server returns a 422 status code indicating a validation error.
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset user password.
   *
   * @param {Object} data - The data for the request.
   * @param {Object} data.requestBody - The body of the request containing necessary information to reset the password.
   * @returns {CancelablePromise<LoginResetPasswordResponse>} A promise that resolves to a message indicating successful response or rejects with an ApiError.
   * @throws {ApiError} If there is a validation error (HTTP 422).
   *
   * Example:
   * ```javascript
   * resetPassword({
   *   requestBody: {
   *     email: 'user@example.com',
   *     token: 'resetToken123'
   *   }
   * })
   * .then(response => console.log(response))
   * .catch(error => console.error(error));
   * ```
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Generates HTML content for password recovery.
   *
   * @param {LoginRecoverPasswordHtmlContentData} data - The data required for the request.
   * @param {string} data.email - The email address associated with the account.
   * @returns {Promise<CancelablePromise<LoginRecoverPasswordHtmlContentResponse>>} A Promise that resolves to a CancelablePromise containing the response from the server.
   * @throws {ApiError} If an API error occurs during the request, such as validation errors.
   *
   * Example:
   *   const data = {
   *     email: "user@example.com"
   *   };
   *   recoverPasswordHtmlContent(data)
   *     .then(response => console.log(response))
   *     .catch(error => console.error(error));
   */
  public static recoverPasswordHtmlContent(
    data: LoginRecoverPasswordHtmlContentData,
  ): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery-html-content/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UsersService {
  /**
   * Retrieve users from the system.
   *
   * @param {Object} [data] - The data for the request.
   * @param {number} [data.skip] - The number of users to skip in the response.
   * @param {number} [data.limit] - The maximum number of users to return in the response.
   * @returns {CancelablePromise<UsersReadUsersResponse>} A promise that resolves with the users data.
   * @throws {ApiError} If an error occurs during the request, e.g., validation errors.
   *
   * @example
   * try {
   *   const result = await readUsers({ skip: 0, limit: 10 });
   *   console.log(result);
   * } catch (error) {
   *   if (error instanceof ApiError) {
   *     console.error("API Error:", error.message);
   *   } else {
   *     console.error("Unexpected Error:", error);
   *   }
   * }
   */
  public static readUsers(
    data: UsersReadUsersData = {},
  ): CancelablePromise<UsersReadUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User
   *
   * Creates a new user based on the provided data.
   *
   * @param {Object} data - The data for the request.
   * @param {Object} data.requestBody - The body of the request containing the user data.
   * @returns {CancelablePromise<UsersCreateUserResponse>} - Promise that resolves to a UserPublic object on success, or rejects with an ApiError if there is a validation error (HTTP 422).
   *
   * @throws {ApiError} If the server returns a 422 status code due to validation errors.
   */
  public static createUser(
    data: UsersCreateUserData,
  ): CancelablePromise<UsersCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get current user.
   *
   * @returns {UsersReadUserMeResponse} Successful response with the current user's public information.
   * @throws {ApiError} Throws an API error if the request fails or if there is a server-side issue.
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Deletes the currently authenticated user's account.
   *
   * This method sends a DELETE request to the "/api/v1/users/me" endpoint to remove the user associated with the current authentication context.
   *
   * @returns {CancelablePromise<UsersDeleteUserMeResponse>}
   *   - A promise that resolves with a response containing information about the deletion of the user's account.
   *
   * @throws {ApiError}
   *   - Throws an error if there is an API-related issue during the request, such as network errors or invalid responses.
   */
  public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param {UsersUpdateUserMeData} data - The data for the request.
   * @returns {CancelablePromise<UsersUpdateUserMeResponse>} Successful response containing updated user details.
   * @throws {ApiError} If the update fails, an ApiError will be thrown with a status code of 422 and the message "Validation Error".
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update own password.
   *
   * @param {Object} data - The data for the request.
   * @param {Object} data.requestBody - The new password details.
   * @returns {CancelablePromise<UsersUpdatePasswordMeResponse>} Successful Response containing a message.
   * @throws {ApiError} Throws an error if validation fails (HTTP 422).
   *
   * Example:
   * const result = await updatePasswordMe({
   *   requestBody: {
   *     oldPassword: 'oldPass123',
   *     newPassword: 'newPass456'
   *   }
   * });
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData,
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   *
   * @param {UsersRegisterUserData} data - The data for the request.
   * @returns {CancelablePromise<UsersRegisterUserResponse>} Successful Response of type UsersRegisterUserResponse.
   * @throws {ApiError} If an error occurs during the API call, such as validation errors (422).
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User By Id
   *
   * Get a specific user by id.
   *
   * @param {Object} data - The data for the request.
   * @param {string} data.userId - The ID of the user to retrieve.
   * @returns {Promise<UserPublic>} Successful Response
   * @throws {ApiError}
   */
  public static readUserById(
    data: UsersReadUserByIdData,
  ): CancelablePromise<UsersReadUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param {UsersUpdateUserData} data - The data for the request.
   * @param {string} data.userId - The ID of the user to update.
   * @param {object} data.requestBody - The request body containing user details.
   * @returns {CancelablePromise<UsersUpdateUserResponse>} Successful Response
   * @throws {ApiError}
   */
  public static updateUser(
    data: UsersUpdateUserData,
  ): CancelablePromise<UsersUpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User
   * Deletes a user based on the provided user ID.
   *
   * @param {UsersDeleteUserData} data - The data for the request.
   * @param {string} data.userId - The unique identifier of the user to be deleted.
   * @returns {Promise<UsersDeleteUserResponse>} A promise that resolves with a message indicating successful deletion or rejects with an error if validation fails.
   * @throws {ApiError} Throws an API error if the request encounters issues such as validation errors (HTTP status 422).
   */
  public static deleteUser(
    data: UsersDeleteUserData,
  ): CancelablePromise<UsersDeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Sends a test email.
   *
   * @param data - The data for the request.
   * @property {string} data.emailTo - The recipient's email address.
   * @returns {CancelablePromise<UtilsTestEmailResponse>} A promise that resolves with the successful response message.
   * @throws {ApiError} If an error occurs during the API call, including validation errors (HTTP 422).
   *
   * @example
   * const data = {
   *   emailTo: "recipient@example.com"
   * };
   * testEmail(data).then(response => {
   *   console.log(response.message);
   * }).catch(error => {
   *   console.error("API Error:", error);
   * });
   */
  public static testEmail(
    data: UtilsTestEmailData,
  ): CancelablePromise<UtilsTestEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/utils/test-email/",
      query: {
        email_to: data.emailTo,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Performs a health check to verify the service is running.
   *
   * @returns {boolean} True if the health check is successful, otherwise false.
   * @throws {ApiError} If an error occurs during the health check.
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check/",
    })
  }
}
